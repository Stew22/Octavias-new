unit Frm_Sync_Items_Products_And_OrderForm_DB_Tools_U;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Menus,
  System.ImageList, Vcl.ImgList, Vcl.ExtCtrls , DM_Products,DM_Order,
  frm_DB_Tools_View_Results_U, Vcl.ComCtrls;

type
  Tfrmsyncproductsandorder = class(TForm)
    pnl1: TPanel;
    mm1: TMainMenu;
    il1: TImageList;
    File1: TMenuItem;
    File2: TMenuItem;
    CheckProduct1: TMenuItem;
    N1: TMenuItem;
    N2: TMenuItem;
    ViewSyncErrors1: TMenuItem;
    N3: TMenuItem;
    SyncProducts1: TMenuItem;
    N4: TMenuItem;
    Cancel1: TMenuItem;
    N5: TMenuItem;
    N6: TMenuItem;
    N7: TMenuItem;
    lbl1: TLabel;
    btnhelp: TButton;
    pnl2: TPanel;
    btncheckitems: TButton;
    btnviewerrors: TButton;
    btnsyncitems: TButton;
    lbl2: TLabel;
    btncancel: TButton;
    btnexit: TButton;
    lbl3: TLabel;
    lbl4: TLabel;
    pb1: TProgressBar;
    procedure File2Click(Sender: TObject);
    procedure CheckProduct1Click(Sender: TObject);
    procedure ViewSyncErrors1Click(Sender: TObject);
    procedure SyncProducts1Click(Sender: TObject);
    procedure Cancel1Click(Sender: TObject);
    procedure N5Click(Sender: TObject);
    procedure btncheckitemsClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnviewerrorsClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmsyncproductsandorder: Tfrmsyncproductsandorder;

implementation

{$R *.dfm}

procedure Tfrmsyncproductsandorder.btncheckitemsClick(Sender: TObject);
var
  RcountOrder, RCountProduct, Rnomatch, Rmatch: Integer;
begin
  // Initialize counters
  Rmatch := 0;
  Rnomatch := 0;

  // Check if both tables are active
  if (DataModuleProducts.tblproducts.Active) and (DataModuleOrder.tblorder.Active) then
  begin
    // Disable controls
    DataModuleOrder.tblorder.DisableControls;
    DataModuleProducts.tblproducts.DisableControls;

    // Get record counts
    RcountOrder := DataModuleOrder.tblorder.RecordCount;
    RCountProduct := DataModuleProducts.tblproducts.RecordCount;

    // Reset filters
    DataModuleOrder.tblorder.Filtered := False;
    DataModuleProducts.tblproducts.Filtered := False;
    DataModuleOrder.tblorder.Filter := '';
    DataModuleProducts.tblproducts.Filter := '';

    // Initialize progress bar
    pb1.Min := 0;
    pb1.Max := RCountProduct;
    pb1.Position := 0;
    pb1.Visible := True;

    // Move to first record in both tables
    DataModuleOrder.tblorder.First;
    DataModuleProducts.tblproducts.First;

    // Nested loop to compare every record in tblproducts with every record in tblorder
    while not DataModuleProducts.tblproducts.Eof do
    begin
      // Reset order table pointer for each product
      DataModuleOrder.tblorder.First;

      while not DataModuleOrder.tblorder.Eof do
      begin
        if DataModuleProducts.tblproducts.FieldByName('Item_Discription').AsString =
           DataModuleOrder.tblorder.FieldByName('Item Discription').AsString then
        begin
          // Product found in order table
          // Increment match counter and exit inner loop
          Inc(Rmatch);
          // Add the item description to results when a match is found
          frmViewResults.mmooutputresults.Lines.Add(DataModuleProducts.tblproducts.FieldByName('Item_Discription').AsString);
          Break;
        end;
        // Move to next order record
        DataModuleOrder.tblorder.Next;
      end;

      // If no match is found, increment nomatch counter
      if DataModuleOrder.tblorder.Eof then
        Inc(Rnomatch);

      // Move to next product
      DataModuleProducts.tblproducts.Next;

      // Update progress bar position
      pb1.Position := pb1.Position + 1;
    end;

    // Enable controls
    DataModuleOrder.tblorder.EnableControls;
    DataModuleProducts.tblproducts.EnableControls;

    // Hide progress bar
    pb1.Visible := False;

    // Display results
    ShowMessage('Matches: ' + IntToStr(Rmatch) + ', Mismatches: ' + IntToStr(Rnomatch));
  end
  else
  begin
    // One or both tables are not active
    ShowMessage('There Was An Error Connecting To One Or More Of The Database Tables , Please Contact Your Software Developer');
  end;
end;

procedure Tfrmsyncproductsandorder.btnviewerrorsClick(Sender: TObject);
begin
 frmViewResults.showmodal;
end;

procedure Tfrmsyncproductsandorder.Cancel1Click(Sender: TObject);
begin
 btncancel.Click;
end;

procedure Tfrmsyncproductsandorder.CheckProduct1Click(Sender: TObject);
begin
 btncheckitems.Click;
end;

procedure Tfrmsyncproductsandorder.File2Click(Sender: TObject);
begin
 btnhelp.Click;
end;

procedure Tfrmsyncproductsandorder.FormShow(Sender: TObject);
begin
 with DataModuleProducts do
 begin
 if conproducts.Connected = False then
  begin
   //here we will connect
    conproducts.ConnectionString:='Provider=Microsoft.ACE.OLEDB.12.0;' +
    'Data Source=' + ExtractFilePath(Application.ExeName) + '\Bin\Product_Database.accdb' +
    ';Mode=ReadWrite;Persist Security Info=False';
     //
    conproducts.Connected:=True;
    tblproducts.TableName:='tblproducts';
    tblproducts.Active:=True;
    tblproducts.First; //here we go to the first value
    //
  end else
  begin
   if tblproducts.Active = True then
   begin
    //here we will confirm its connected
   end else
   begin
    ShowMessage('There Was An Error Connecting To The Database , Please Contact Your Software Developer');
   end;
  end;
 end;
end;

procedure Tfrmsyncproductsandorder.N5Click(Sender: TObject);
begin
 btnexit.Click;
end;

procedure Tfrmsyncproductsandorder.SyncProducts1Click(Sender: TObject);
begin
btnsyncitems.Click;
end;

procedure Tfrmsyncproductsandorder.ViewSyncErrors1Click(Sender: TObject);
begin
 btnviewerrors.Click;
end;

end.
